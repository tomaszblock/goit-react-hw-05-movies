{"version":3,"file":"static/js/189.b1830c52.chunk.js","mappings":"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","sources":["components/Api/Api.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '0318c5b31af678749f79ee66273e19f0';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const getTrendingMovies = () => api.get('/trending/movie/day');\nexport const searchMovies = query =>\n  api.get('/search/movie', { params: { query } });\nexport const getMovieDetails = id => api.get(`/movie/${id}`);\nexport const getMovieCredits = id => api.get(`/movie/${id}/credits`);\nexport const getMovieReviews = id => api.get(`/movie/${id}/reviews`);\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../Api/Api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    getMovieCredits(movieId).then(response => setCast(response.data.cast));\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      <ul>\n        {cast.map(actor => (\n          <li key={actor.cast_id}>\n            {actor.profile_path && (\n              <img\n                src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n                alt={actor.name}\n                width=\"50\"\n                height=\"75\"\n              />\n            )}\n            {actor.name} as {actor.character}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../Api/Api';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    getMovieReviews(movieId)\n      .then(response => setReviews(response.data.results))\n      .catch(error => console.error(\"Error fetching reviews:\", error));\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Reviews</h2>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <p><strong>{review.author}</strong></p>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, Link, Route, Routes } from 'react-router-dom';\nimport { getMovieDetails } from '../Api/Api';\nimport Cast from '../Cast/Cast';\nimport Reviews from '../Reviews/Reviews';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    getMovieDetails(movieId)\n      .then(response => setMovie(response.data))\n      .catch(error => console.error(\"Error fetching movie details:\", error));\n  }, [movieId]);\n\n  if (!movie) return <p>Loading...</p>;\n\n  return (\n    <div>\n      <h1>{movie.title}</h1>\n      <img src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title} />\n      <p><strong>User Rating:</strong> {movie.vote_average}</p>\n      <p><strong>Overview:</strong> {movie.overview}</p>\n      <p><strong>Genres:</strong> {movie.genres.map(genre => genre.name).join(', ')}</p>\n      <nav>\n        <Link to={`cast`}>Cast</Link>\n        <br></br>\n        <Link to={`reviews`}>Reviews</Link>\n      </nav>\n      <Routes>\n        <Route path=\"cast\" element={<Cast />} />\n        <Route path=\"reviews\" element={<Reviews />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["api","axios","baseURL","params","api_key","getTrendingMovies","get","searchMovies","query","getMovieDetails","id","concat","getMovieCredits","getMovieReviews","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","then","response","data","_jsxs","children","_jsx","map","actor","profile_path","src","alt","name","width","height","character","cast_id","reviews","setReviews","results","catch","error","console","length","review","author","content","movie","setMovie","title","poster_path","vote_average","overview","genres","genre","join","Link","to","Routes","Route","path","element","Cast","Reviews"],"sourceRoot":""}